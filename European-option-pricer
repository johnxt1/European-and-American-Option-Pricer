import math
import sys

class BinModel:
    def __init__(self):
        self.S0 = None
        self.U = None
        self.D = None
        self.R = None

    def input_data(self):
        self.S0 = float(input("Enter S0: "))
        self.U = float(input("Enter U: "))
        self.D = float(input("Enter D: "))
        self.R = float(input("Enter R: "))
        print()
        print(f"S0 = {self.S0}")
        print(f"U  = {self.U}")
        print(f"D  = {self.D}")
        print(f"R  = {self.R}\n")

        if self.S0 <= 0 or self.U <= 0 or self.D <= 0 or self.U <= self.D or self.R <= 0:
            raise ValueError("Illegal data ranges")
        if self.R >= self.U or self.R <= self.D:
            raise ValueError("Arbitrage exists")

        print("Input data checked")
        print("There is no arbitrage\n")

    def risk_neutral_prob(self):
        return (self.R - self.D) / (self.U - self.D)

    def stock_price(self, n, i):
        return self.S0 * (self.U ** i) * (self.D ** (n - i))

def newton_symb(N, n):
    if n < 0 or n > N:
        return 0
    return math.comb(N, n)


class EurOption:
    def __init__(self):
        self.N = None
        self.K = None

    def option_data(self):
        self.N = int(input("Enter steps to expiry N: "))
        self.K = float(input("Enter strike price K: "))
        print(f"\nN = {self.N}")
        print(f"K = {self.K}\n")

    def payoff(self, S):
        raise NotImplementedError("Override payoff in subclass")

    def price_by_crr(self, model: BinModel):
        p = model.risk_neutral_prob()
        price = 0.0
        for n in range(self.N + 1):
             price += newton_symb(self.N, n) *(p ** n) * ((1 - p) ** (self.N - n)) *self.payoff(model.S(self.N, n)) /(model.R ** self.N)
        return price 


class EurCall(EurOption):
    def payoff(self, S):
        return max(S - self.K, 0.0)


class EurPut(EurOption):
    def payoff(self, S):
        return max(self.K - S, 0.0)


def main():
    model = BinModel()
    try:
        model.input_data()
    except ValueError as e:
        print(f"Error: {e}")
        sys.exit(1)

    
    print("Enter European call option data:")
    call_option = EurCall()
    call_option.option_data()
    call_price = call_option.price_by_crr(model)
    print(f"European Call option price = {call_price:.4f}\n")

    
    print("Enter European put option data:")
    put_option = EurPut()
    put_option.option_data()
    put_price = put_option.price_by_crr(model)
    print(f"European Put option price = {put_price:.4f}\n")
